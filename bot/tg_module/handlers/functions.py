from typing import Union

from aiogram.filters.callback_data import CallbackData

# My Modules
from bot.database import Select


class CatalogCallback(CallbackData, prefix="cc"):
    """–ö–∞—Ç–∞–ª–æ–≥"""
    category_id: int = 0
    product_id: int = 0
    paging_direction: str = "empty"


class InteractionProduct(CallbackData, prefix="ip"):
    """–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–æ–≤–∞—Ä–æ–º"""
    product_id: int = 0
    last_state: str = "CatalogCallback"
    add_in_favorites: bool = False
    add_in_cart: bool = False


class CounterProductItemCartCallback(CallbackData, prefix="cpicc"):
    """–°—á—ë—Ç—á–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ö–æ—Ä–∑–∏–Ω–µ"""
    minus: bool = False
    plus: bool = False
    product_id: int = 0


class PersonalAreaCallback(CallbackData, prefix="pac"):
    """–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"""
    view_purchases: bool = False
    view_favorites: bool = False
    view_cart: bool = False


class OrderingCartCallback(CallbackData, prefix="opc"):
    """–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–æ—Ä–∑–∏–Ω–æ–π"""
    product_id: int = 0  # id —Ç–æ–≤–∞—Ä–∞, —Å –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ

    product_selected: bool = False  # –û—Ç–º–µ—Ç–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
    product_delete: bool = False  # –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã

    select_store: bool = False  # –û–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –ü–í–ó
    store_id: int = 0  # –í—ã–±—Ä–∞–Ω–Ω—ã–π –ü–í–ó
    ordering: bool = False  # –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    purchase_id: int = 0  # –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å
    payment_time: int = 0  # –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –æ—Ç –º–æ–º–µ–Ω—Ç–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ñ–æ—Ä–º–∏—Ç—å"
    payment: bool = False  # –í—ã—Å—Ç–∞–ª–µ–Ω–∏–µ —Å—á—ë—Ç–∞


class FavoritesCallback(CallbackData, prefix="fc"):
    """–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    product_id: int = 0


class PurchasesCallback(CallbackData, prefix="pc"):
    """–ü–æ–∫—É–ø–∫–∏"""
    purchase_id: int = 0


class OtherCallback(CallbackData, prefix="oc"):
    """–ü—Ä–æ—á–∏–µ –∫–æ–ª–±—ç–∫–∏"""
    action: str = ""
    value: Union[str, int] = None


def get_index_product(products_array: list, current_product_id: int) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–µ–∫—Å """
    ind = 0
    for (category_id, product_id, product_name,) in products_array:
        if product_id == current_product_id:
            break
        ind += 1
    return ind


def get_array_slice(array: list,
                    ind: int,
                    limit: int,
                    mode: str = 'left') -> list:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ä–µ–∑ –º–∞—Å—Å–∏–≤–∞"""
    len_array = len(array)
    limit = min(limit, len_array)

    start_ind = ind
    stop_ind = start_ind + limit

    if mode == 'left':
        start_ind = ind - limit
        stop_ind = ind

    elif mode == 'right':
        start_ind += 1
        stop_ind = start_ind + limit

    if stop_ind == 0:
        return array[-(len_array % limit):]

    if start_ind == len_array:
        return array[:limit]

    if start_ind < 0:
        return array[start_ind:] + array[:stop_ind]

    if stop_ind > len_array:
        return array[start_ind:]

    return array[start_ind:stop_ind]


def get_current_and_number_list(array: list,
                                ind: int,
                                paging_direction: str,
                                default_limit: int) -> list:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
    len_array = len(array)
    number_list = len_array // default_limit + 1

    if (paging_direction in ('empty', 'right',) and ind == 0) or ind == (len_array - 1):
        current_list = 1

    elif paging_direction == 'left' and ind == 0:
        current_list = number_list

    else:
        if paging_direction == 'left':
            ind -= 1
        elif paging_direction == 'right':
            ind += 1

        current_list = ind // default_limit + 1

    return [current_list, number_list]


def get_purchase_item_text(purchase_id: int,
                           store_data: list,
                           products_data: list,
                           payment_status: bool = False) -> str:
    """–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ"""
    payment_status_text = '‚úÖ' if payment_status else '‚ùå' if not payment_status else 'NULL'

    [store_id,
     store_name,
     address] = store_data

    text = f"<b>–ó–∞–∫–∞–∑ ‚Ññ</b> <code>{purchase_id}</code>\n" \
           f"<b>–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã</b>: {payment_status_text}\n"

    last_category_id = 0
    total_price = 0

    for (category_id,
         product_id,
         product_name,
         manufacturer_name,
         description,
         product_selected,
         product_price,
         number_in_cart,
         number_in_store,) in products_data:
        """–ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤"""

        if category_id != last_category_id:
            last_category_id = category_id
            category_name = Select.category_name_by_id(category_id)
            text += f"\n{category_name}\n"

        number_product = min(number_in_cart, number_in_store)
        price_product_item = float(product_price) * number_in_cart

        text += f"üîπ {product_name} <code>{product_price} √ó {number_product} —à—Ç = {price_product_item} ‚ÇΩ</code>\n"

        total_price += price_product_item

    text += f"\n" \
            f"<b>–ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞</b>:\n" \
            f"{store_name} ({address})\n"

    text += f"\n" \
            f"<b>–ò—Ç–æ–≥</b>: <code>{total_price} ‚ÇΩ</code>"

    return text
